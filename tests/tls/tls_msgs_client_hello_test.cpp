#include <gtest/gtest.h>
#include <snet/tls/msgs/client_hello.hpp>

using namespace testing;
using namespace snet::tls;

using SerializeTestParam = std::vector<uint8_t>;
class ClientHelloSerializeTest : public TestWithParam<SerializeTestParam>
{
public:
    ClientHelloSerializeTest() = default;
    ~ClientHelloSerializeTest() = default;
};

TEST_P(ClientHelloSerializeTest, DeserializeSerialize)
{
    SerializeTestParam param = GetParam();
    //SerializeTestParam serialized(param.size());
    //size_t serializedLength;

    ClientHello msg;
    ASSERT_NO_THROW(msg.deserialize(param));

    //ASSERT_NO_THROW(serializedLength = msg.serialize(serialized));
    //serialized.resize(serializedLength);

    //ASSERT_EQ(serialized, param);
}

// clang-format off
std::vector<SerializeTestParam> gClientHelloParams =
{
    // TLS 1.2
    {
        // Version
        0x03, 0x03,
        // Random
        0xff, 0x71, 0xdd, 0x83, 0x37, 0x6f, 0x0a, 0x35, 0xa8, 0xb8, 0x6e, 0x8b, 0x9f, 0x51, 0x6d, 0x99,
        0x38, 0xa3, 0x6e, 0xc3, 0x80, 0x3e, 0x48, 0xb5, 0xa2, 0x56, 0xfc, 0x7c, 0xd5, 0x97, 0x52, 0x8d,
        // Session ID
        0x00,
        // Cipher Suites
        0x00, 0x38,
        0xc0, 0x2c, 0xc0, 0x30, 0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x00,
        0x9e, 0xc0, 0x24, 0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23, 0xc0, 0x27, 0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14, 0x00,
        0x39, 0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9d, 0x00, 0x9c, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35, 0x00,
        0x2f, 0x00, 0xff,
        // Compression
        0x01, 0x00,
        // Extensions
        0x00, 0x64,
        // server_name:
        0x00, 0x00, 0x00, 0x0e,
        0x00, 0x0c, 0x00, 0x00, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31,
        // ec_point_formats:
        0x00, 0x0b, 0x00, 0x04,
        0x03, 0x00, 0x01, 0x02,
        // supported_groups:
        0x00, 0x0a, 0x00, 0x0c,
        0x00, 0x0a, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18,
        // session_ticket:
        0x00, 0x23, 0x00, 0x00,
        // encrypt_then_mac:
        0x00, 0x16, 0x00, 0x00,
        // extended_master_key:
        0x00, 0x17, 0x00, 0x00,
        // signature_algorithms:
        0x00, 0x0d, 0x00, 0x2a,
        0x00, 0x28, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a,
        0x08, 0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x03, 0x03,
        0x03, 0x01, 0x03, 0x02, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02
    },
    // TLS 1.3
    {
        // Version
        0x03, 0x03,
        // Random
        0x16, 0x96, 0x37, 0xb5, 0x81, 0xd8, 0x3e, 0x61, 0x5c, 0xee, 0x48, 0xae, 0x69, 0xfd, 0x0d, 0x81, 
        0x0f, 0x24, 0xe8, 0x85, 0x5d, 0xac, 0x98, 0x96, 0x00, 0xb4, 0x8f, 0xac, 0x97, 0x0c, 0x36, 0xd9,
        // Session ID
        0x20, 
        0x04, 0x44, 0x05, 0x81, 0x8c, 0xad, 0x9d, 0xeb, 0x8e, 0x76, 0x3b, 0x1c, 0x69, 0x01, 0x1e, 0x4a,
        0x1d, 0xdc, 0x97, 0xcb, 0x57, 0xb2, 0xff, 0x0e, 0x2b, 0xd1, 0x72, 0x25, 0xdb, 0xfd, 0x5d, 0x71,
        // Cipher Suites
        0x00, 0x04,
        0x13, 0x01,
        0x00, 0xff,
        // Compression
        0x01, 0x00,
        // Extensions
        0x00, 0x99,
        // server_name:
        0x00, 0x00,
        0x00, 0x0e,
        0x00, 0x0c, 0x00, 0x00, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31,
        // ec_point_formats:
        0x00, 0x0b,
        0x00, 0x04,
        0x03, 0x00, 0x01, 0x02,
        // supported_groups:
        0x00, 0x0a, 0x00, 0x16,
        0x00, 0x14,
        0x00, 0x1d, 0x00, 0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02,
        0x01, 0x03, 0x01, 0x04,
        // session_ticket:
        0x00, 0x23, 0x00, 0x00,
        // encrypt_then_mac:
        0x00, 0x16,
        0x00, 0x00,
        // extended_master_secret:
        0x00, 0x17,
        0x00, 0x00,
        // signature_algorithms:
        0x00, 0x0d,
        0x00, 0x1e,
        0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 
        0x08, 0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01,
        // supported_versions:
        0x00, 0x2b,
        0x00, 0x03,
        0x02,
        0x03, 0x04,
        // pks_key_exchange_modes:
        0x00, 0x2d,
        0x00, 0x02,
        0x01, 0x01,
        // key_share:
        0x00, 0x33,
        0x00, 0x26,
        0x00, 0x24,
        0x00, 0x1d, 0x00, 0x20, 0x50, 0xdf, 0x3e, 0xf6, 0x32, 0x13, 0x2b, 0x8b, 0xcb, 0xe0, 0x01, 0x94, 
        0xfc, 0x19, 0x08, 0x81, 0x09, 0xf5, 0xda, 0x42, 0xe7, 0xbd, 0x8a, 0x7d, 0xcb, 0xf4, 0xb9, 0x7b,
        0xdd, 0x71, 0xaf, 0x32
    },
    { 
        0x03, 0x03, 0xd7, 0xc7, 0xea, 0x09, 0x76, 0x4e, 0x7e, 0xca, 0x33, 0x3c,
        0x7e, 0x4a, 0xa3, 0x51, 0x09, 0x97, 0xa9, 0x25, 0x7c, 0x9d, 0x36, 0x3c, 0x12, 0x16, 0x98, 0x10,
        0xb8, 0xac, 0x6f, 0x7c, 0xb8, 0xf8, 0x20, 0x42, 0xdd, 0x4b, 0x43, 0x43, 0xd6, 0x97, 0xcb, 0x02,
        0x32, 0xbb, 0x14, 0xf4, 0x72, 0xfb, 0xd9, 0xeb, 0xbc, 0x52, 0x7f, 0xbe, 0x8d, 0xf5, 0xb6, 0xd7,
        0x9d, 0x90, 0xff, 0x14, 0x51, 0x89, 0xfd, 0x00, 0x08, 0x13, 0x02, 0x13, 0x03, 0x13, 0x01, 0x00,
        0xff, 0x01, 0x00, 0x00, 0x87, 0x00, 0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00,
        0x16, 0x00, 0x14, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x01, 0x00, 0x01,
        0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08,
        0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04,
        0x01, 0x05, 0x01, 0x06, 0x01, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x2d, 0x00, 0x02,
        0x01, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x45, 0x92, 0x3b,
        0x80, 0x18, 0xa6, 0x7c, 0xdf, 0x9c, 0x52, 0x94, 0x4f, 0x53, 0x12, 0xcb, 0xd3, 0x06, 0x71, 0x6c,
        0x14, 0xc9, 0x44, 0xf1, 0xa5, 0xb4, 0x4f, 0x71, 0xc0, 0x25, 0x21, 0x79,
    }
};
// clang-format on

INSTANTIATE_TEST_SUITE_P(ClientHelloTests, ClientHelloSerializeTest, ValuesIn(gClientHelloParams));
