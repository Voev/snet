#include <gtest/gtest.h>
#include <snet/tls/msgs/server_hello.hpp>

using namespace testing;
using namespace snet::tls;

using SerializeTestParam = std::vector<uint8_t>;

class ServerHelloSerializeTest : public TestWithParam<SerializeTestParam>
{
public:
    ServerHelloSerializeTest() = default;
    ~ServerHelloSerializeTest() = default;
};

TEST_P(ServerHelloSerializeTest, DeserializeSerialize)
{
    SerializeTestParam param = GetParam();
    //SerializeTestParam serialized(param.size());
    //size_t serializedLength;

    ServerHello msg;
    ASSERT_NO_THROW(msg.deserialize(param));

    //ASSERT_NO_THROW(serializedLength = msg.serialize(serialized));
    //serialized.resize(serializedLength);

    //ASSERT_EQ(serialized, param);
}

// clang-format off
std::vector<SerializeTestParam> gServerHelloParams =
{
    // TLS 1.2
    {
        // Version:
        0x03, 0x03,
        // Random:
        0xf5, 0x9f, 0x8b, 0xf5, 0x06, 0xa4, 0xdc, 0x22, 0xd9, 0x7c, 0x79, 0x0a, 0xc4, 0x01, 0xc6, 0xa4,
        0x26, 0x1a, 0xe1, 0x3a, 0xb1, 0xfc, 0x55, 0x12, 0xec, 0xd3, 0xeb, 0xde, 0xd3, 0xc2, 0xb5, 0x69,
        // Session ID:
        0x00,
        // Cipher Suite:
        0xc0, 0x2c,
        // Compression
        0x00,
        // Extensions:
        0x00, 0x15,
        // renegotiation_info:
        0xff, 0x01,
        0x00, 0x01, 0x00,
        // ec_point_formats:
        0x00, 0x0b,
        0x00, 0x04, 0x03, 0x00, 0x01, 0x02,
        // session_ticket:
        0x00, 0x23, 0x00, 0x00,
        // extended_master_secret:
        0x00, 0x17, 0x00, 0x00
    },
    // TLS 1.3
    {
        // Version
        0x03, 0x03,
        // Random:
        0xff, 0x3a, 0xfd, 0x5e, 0x11, 0xc6, 0x02, 0x56, 0x8a, 0x9d, 0x1d, 0x8e, 0xc2, 0x0a, 0xbb, 0x7f,
        0xf4, 0x11, 0x75, 0xfa, 0xde, 0x67, 0x6f, 0xe0, 0xfa, 0xa8, 0x6b, 0x0e, 0x3f, 0x51, 0x4b, 0x19,
        // Session ID:
        0x20,
        0x04, 0x44, 0x05, 0x81, 0x8c, 0xad, 0x9d, 0xeb, 0x8e, 0x76, 0x3b, 0x1c, 0x69, 0x01, 0x1e, 0x4a,
        0x1d, 0xdc, 0x97, 0xcb, 0x57, 0xb2, 0xff, 0x0e, 0x2b, 0xd1, 0x72, 0x25, 0xdb, 0xfd, 0x5d, 0x71,
        // Cipher Suite:
        0x13, 0x01,
        // Compression
        0x00,
        // Extensions
        0x00, 0x2e,
        // supported_versions:
        0x00, 0x2b, 0x00, 0x02, 0x03, 0x04,
        // key_share:
        0x00, 0x33, 0x00, 0x24,
        0x00, 0x1d, 0x00, 0x20, 0xd0, 0xcb, 0x37, 0xc0, 0x72, 0x91, 0x68, 0x7e, 0x88, 0x11, 0x7a, 0x57,
        0x0e, 0x40, 0x79, 0x4c, 0x24, 0xc1, 0xaf, 0x28, 0xaa, 0xba, 0x73, 0x9c, 0xd3, 0x6e, 0xc6, 0x3a,
        0xd0, 0x35, 0x73, 0x2b
    },
};
// clang-format on

INSTANTIATE_TEST_SUITE_P(ServerHelloTests, ServerHelloSerializeTest, ValuesIn(gServerHelloParams));
